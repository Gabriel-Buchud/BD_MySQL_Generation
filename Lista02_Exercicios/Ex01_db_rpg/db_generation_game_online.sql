-- MySQL Script generated by MySQL Workbench
-- Wed Jul 24 18:29:43 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_generation_game_online
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema db_generation_game_online
-- -----------------------------------------------------
CREATE database db_generation_game_online ;
USE db_generation_game_online ;

-- -----------------------------------------------------
-- Table `db_generation_game_online`.`tb_classes`
-- -----------------------------------------------------
CREATE TABLE tb_classes (
  id BIGINT NOT NULL AUTO_INCREMENT,
  nome VARCHAR(100) NOT NULL,
  descricao VARCHAR(255) NULL,
  PRIMARY KEY (id))
ENGINE = InnoDB;

INSERT INTO tb_classes (nome, descricao) VALUES
('Warrior', 'Mestre em combate corpo a corpo com alta resistência e defesa'),
('Mage', 'Mestre em magia com grande poder de ataque à distância'),
('Hunter', 'Especialista em ataques de longa distância e armadilhas'),
('Rogue', 'Especialista em furtividade e ataques rápidos e mortais'),
('Paladin', 'Guerreiro sagrado com habilidades de defesa e cura');

-- -----------------------------------------------------
-- Table `db_generation_game_online`.`tb_personagens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tb_personagens (
  id BIGINT NOT NULL AUTO_INCREMENT,
  nome VARCHAR(100) NOT NULL,
  nivel INT NOT NULL,
  poder_atk INT NOT NULL,
  poder_def INT NOT NULL,
  classe_id INT NULL,
  tb_classes_id BIGINT NOT NULL,
  PRIMARY KEY (id),
  INDEX fk_tb_personagens_tb_classes_idx (tb_classes_id ASC) VISIBLE,
  CONSTRAINT fk_tb_personagens_tb_classes
    FOREIGN KEY (tb_classes_id)
    REFERENCES tb_classes (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO tb_personagens (nome, nivel, poder_atk, poder_def, tb_classes_id) VALUES
('Thrall', 85, 3200, 2100, 1),
('Garrosh', 80, 3100, 2000, 1),
('Jaina', 80, 3400, 900, 2),
('Khadgar', 75, 3300, 950, 2),
('Sylvanas', 75, 3000, 1100, 3),
('Tyrande', 80, 3100, 1700, 3),
('Garona', 70, 2900, 1000, 4),
('Valeera', 75, 2700, 1200, 4),
('Uther', 90, 2800, 2200, 5),
('Arthas', 85, 3300, 2000, 5);

-- SELECT que retorna personagens com poder de ataque maior que 2000
SELECT * FROM tb_personagens WHERE poder_atk > 2000;

-- SELECT que retorna personagens com poder de defesa no intervalo 1000 e 2000
SELECT * FROM tb_personagens WHERE poder_def BETWEEN 1000 AND 2000;

-- SELECT utilizando LIKE para buscar personagens com a letra 'C' no nome
SELECT * FROM tb_personagens WHERE nome LIKE '%C%';

-- SELECT utilizando INNER JOIN unindo tb_personagens e tb_classes
SELECT p.*, c.nome AS classe_nome, c.descricao AS classe_descricao
FROM tb_personagens p
INNER JOIN tb_classes c ON p.tb_classes_id = c.id;

-- SELECT utilizando INNER JOIN para trazer apenas personagens de uma classe específica (ex: Hunters)
SELECT p.*, c.nome AS classe_nome, c.descricao AS classe_descricao
FROM tb_personagens p
INNER JOIN tb_classes c ON p.tb_classes_id = c.id
WHERE c.nome = 'Hunter';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
